// swiftlint:disable line_length
// swiftlint:disable variable_name

import Foundation
#if os(iOS) || os(tvOS) || os(watchOS)
import UIKit
#elseif os(OSX)
import AppKit
#endif
{% macro mockedVariableName variable %}
	var {{ variable.name }}: {{ variable.typeName }}
{% endmacro %}

{% macro mockedVariableNameDeclaration variable %}{{ variable.name }}: {{ variable.typeName }}{% endmacro %}

{% macro mockOptionalVariable variable %}{% call mockedVariableNameDeclaration variable %} = {% call mockOptionalValue %}{% endmacro %}
{% macro mockOptionalValue %}nil{% endmacro %}

{% macro createStub variable %}{% call mockedVariableNameDeclaration variable %} = {% call stubValue variable %}{% endmacro %}
{% macro stubValue variable %}{% if variable.type.kind == "protocol" %}{% call protocolMockValue variable %}{% else %}.stub(){% endif %}{% endmacro %}

{% macro mockArrayVariable variable %}{% call mockedVariableNameDeclaration variable %} = {% call mockArrayValue %}{% endmacro %}
{% macro mockArrayValue %}[]{% endmacro %}

{% macro mockDictionaryVariable variable %}{% call mockedVariableNameDeclaration variable %} = {% call mockDictionaryValue %}{% endmacro %}
{% macro mockDictionaryValue %}[:]{% endmacro %}

{% macro protocolMockValue variable %}{{ variable.typeName }}Mock.stub(){% endmacro %}

{% macro setVariableValue variable %}{% if variable.isOptional%}{% call mockOptionalVariable variable %}{% elif variable.isArray %}{% call mockedVariableNameDeclaration variable %} = []{% elif variable.isDictionary %}{% call mockedVariableNameDeclaration variable %} = [:]{% elif variable.type|annotated:"AutoStubbable" or variable.type|annotated:"AutoMockable" %}{% call createStub variable %}{% else %}{% call mockedVariableNameDeclaration variable %} = .init(){% endif %}{% endmacro %}

{% for import in argument.autoMockableImports %}
import {{ import }}
{% endfor %}

{% for import in argument.autoMockableTestableImports %}
@testable import {{ import }}
{% endfor %}

// MARK: - Arrays
{% for type in types.all where type|annotated:"AutoStubbable" %}

// MARK: - {{ type.name }}Array
extension Array where Element == {{ type.name }} {
	public static func stub(count: Int = 0) -> [Element] {
		Array(repeating: .stub(), count: count)
	}
}
{% endfor %}

// MARK: - Structs
// -----------------------------------------------------------
{% for type in types.structs where type|annotated:"AutoStubbable" %}

// MARK: - {{ type.name }}
extension {{ type.name }} {
	public static func stub(
		{% for variable in type.variables where not variable.isComputed|!definedInExtension %}
        {% call setVariableValue variable %}{% if not forloop.last %}, {% endif %}
		{% endfor %}
	) -> Self {
		.init({% for variable in type.variables where not variable.isComputed|!definedInExtension %}
			{{ variable.name }}: {{ variable.name }}{% if not forloop.last %},{% endif %}
			{% endfor %}
		)
	}
}
{% endfor %}

// MARK: - Enums
// -----------------------------------------------------------
{% for type in types.enums where type|annotated:"AutoStubbable" %}

// MARK: - {{ type.name }}
extension {{type.name}} {
    public static func stub(caseValue: {{ type.name }} = .{{ type.cases.first.name }}) -> Self {
        caseValue
    }
}
{% endfor %}

// MARK: - Protocols
// -----------------------------------------------------------
{% for type in types.protocols where type|annotated:"AutoStubbable" %}

// MARK: - {{ type.name }}
extension {{type.name}}Mock {
    public static func stub() -> {{type.name}} {
        {{type.name}}Mock()
    }
}
{% endfor %}

// -----------------------------------------------------------

{% include "ProtocolAutoStubbable.stencil" %}
